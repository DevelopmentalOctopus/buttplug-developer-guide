#+OPTIONS: toc:nil
* Summary
:PROPERTIES:
:EXPORT_FILE_NAME: SUMMARY.md
:END:
#+BEGIN_SRC emacs-lisp :exports results :results value raw replace
(org-build-gitbook-toc)
#+END_SRC

- [[file:README.md#you-your-butt-internet-buttplugs-and-you][You, Your Butt, Internet Buttplugs, And You]]
- [[file:introduction.md#foreword][Foreword]]
  - [[file:introduction.md#wants-and-needs][Wants and Needs]]
  - [[file:introduction.md#i-want-to-be-a-shirt][I Want To Be A Shirt]]
  - [[file:introduction.md#cest-nest-pas-une-buttplug][C'est n'est pas une Buttplug]]
  - [[file:introduction.md#why-do-i-need-you-to-tell-me-where-my-butt-is][Why Do I Need You To Tell Me Where My Butt Is]]
- [[file:buttplug-ethics.md#buttplug-ethics][Buttplug Ethics]]
  - [[file:buttplug-ethics.md#wait-this-doesnt-sound-technical][Wait This Doesn't Sound Technical]]
  - [[file:buttplug-ethics.md#there-is-no-such-thing-as-ethical-buttplugging-under-open-source][There is No Such Thing As Ethical Buttplugging Under Open Source]]
  - [[file:buttplug-ethics.md#you-must-be-this-tall-to-code-with-this-library][You Must Be This Tall To Code With This Library]]
  - [[file:buttplug-ethics.md#empathy-for-the-user-having-sex-with-your-software][Empathy for the User Having Sex With Your Software]]
- [[file:architecture.md#strategies-against-buttplug-architecture][Strategies Against Buttplug Architecture]]
  - [[file:architecture.md#a-note-for-grizzled-developers][A Note for Grizzled Developers]]
  - [[file:the3genders.md#the-3-genders-server-client-application][The 3 Genders: Server, Client, Application]]
    - [[file:the3genders.md#buttplug-servers][Buttplug Servers]]
    - [[file:the3genders.md#buttplug-clients][Buttplug Clients]]
    - [[file:the3genders.md#applications][Applications]]
  - [[file:the3genders.md#configuration-examples][Configuration Examples]]
- [[file:buttplug-protocol-and-etiquette.md#buttplug-protocol-and-etiquette][Buttplug Protocol and Etiquette]]
  - [[file:buttplug-protocol-and-etiquette.md#computer-to-toy-communication][Computer To Toy Communication]]
  - [[file:buttplug-protocol-and-etiquette.md#application-to-computer-communication][Application to Computer Communication]]
  - [[file:buttplug-protocol-and-etiquette.md#where-the-buttplug-protocol-comes-into-play][Where the Buttplug Protocol Comes into Play]]
  - [[file:buttplug-protocol-and-etiquette.md#what-the-buttplug-protocol-looks-like][What the Buttplug Protocol Looks Like]]

* README
:PROPERTIES:
:EXPORT_FILE_NAME: README.md
:END:
** You, Your Butt, Internet Buttplugs, And You
An design guide for the Buttplug Sex Toy Control System

By Kyle Machulis (qDot), Lead Architect

* Foreword
:PROPERTIES:
:EXPORT_FILE_NAME: introduction.md
:END:
** Foreword
*** Wants and Needs
Before we jump into all of the descriptions and eccentricities and
whatnot that make up Buttplug, let's start with a parable.

Have you ever bought a new thing you've been really excited about, but
then it turns out that it didn't work as expected for you?

Maybe used some software or played a game that almost gets there but
doesn't quite work for you?

Here's a story from my days as a virtual world developer, about what
this situation looks like from the designer's side.

*** I Want To Be A Shirt
"I want to be a shirt."

"A what?"

"A shirt."

"Like, you want a shirt with a picture of you on it or something? You
can already do that you know."

"No. I want to /be/ a shirt. I want to exist as the piece of clothing.
That piece of clothing should be a shirt. I get off on the idea of
being a shirt. It has been a dream of mine and we're here for dreams,
right?"

Having just spend a non-trivial amount of time lovingly crafting a new
type of genitals, with all sorts of bits and bobs and extras, the last
thing you want to hear is that your creation is not appreciated.
Building something like this that does everything it's supposed to AND
communicates across multiple dimensions is not easy, and yet,
according to this critic, it has completely missed the mark.

"Why do you want to be a shirt? How would this be better than having
some new genitalia? Look, it even vibrates when you poke it like
this!"

"Well, yes. That's very good. It even goes all red and bulgy, a nice
touch. But... I don't know. It's just always been a thing I've wanted
to be. I would much rather fulfill my needs via being a shirt, than to
graft on some new body part I'm not even sure I'd be in to."

"And you want people to wear you?"

"That'd be the idea, yes."

Damnit. Damn. It. Everyone was supposed to want one of these new body
parts, what with the sounds and the arousals and the thrustings and
the juices. Sure the inter-dimensional communication part would be a
tough sell due to the learning curve, but once everyone caught on,
it'd be a new paradise.

That was the plan, and it'd be awesome, and popular, and there would
be much rejoicing. Yet, here we are.

"But you can't be a shirt."

"Why can't I be a shirt?"

"Because that would violate laws. A lot of laws."

"What? It's not illegal to be a shirt anywhere that I know of."

"Not like, legal laws. Physical laws. Laws of existence."

"But don't you control those kind of laws? Or don't some of the others
like you have that power?"

DAMN. IT. Note to self: never create worlds that can contain anything
capable of making a good point.

"I support we kind of do? But if I change those laws for you, I have
to change them for everyone, and I don't think everyone wants to be a
shirt. Or pants. Or a shoe. Much less to derive gratification from
being any of those."

"Why wouldn't other people want to be shirts? There's so many
possibilities. I would be a continual soft hug. I would adorn the
wearer and make them look nice. I would absorb their sweat."

"We didn't give you sweat glands. How would you even pull that off?"

"I'd find a way. We've got our own tools down here too, you know.
They're just not powerful enough to let me be a shirt."

"Yeah there's a reason for that. What about if you tried to... Ugh, is
there even a verb for this? What if you tried to... shirt someone and
they didn't know you were a living shirt or whatever it is you're
asking for here. Think about the security issues."

"I think it'd be pretty obvious 'cause I'd be talking."

"Oh so you want to be a TALKING shirt? Anything else on this list of
demands?"

"Ability to change cloth type? I'd want to stay current with the trends."

"Forget I asked. And besides, not everyon... everyshirt would talk. We
already have to deal with enough chaos around here without adding
'Non-consensual shirtings' to our list."

"Hey, you're the one building this world. You wanted feedback on how
to do that, and I'm giving it to you."

"You are the worst focus group."

"You randomly asked the first person you saw. Blame fate, not me."

A quiet voice pops up from a few yards, or miles, over. Scale is
difficult when you're looking down from above.

"If they get to be a shirt can I be a cube?"

Fuck.

*** C'est n'est pas une Buttplug
The preceding story actually happened.

Sure, it was in the context of the Second Life virtual world, and the
narrator (me) was less god and more employee, but the events happened
basically as stated. Someone really wanted to be a shirt, and it
couldn't happen. This was despite me (as a software engineer who,
before being hired, had made real life sex toys work with Second Life)
having the ability to control the world, albeit in a manner limited by
software development time, project specifications, and other obstacles
both gods and engineers have to deal with.

There are a lot of people out there that want to be shirts, at least,
in the terms of this horribly tortured metaphor. They've bought a sex
toy, and the interface provided to them to control it doesn't work for
them for some reason, or the content isn't to their liking. Buttplug
(the software, not the sex toy genre) was created for that situation.

Buttplug is nothing without interface applications. The only real
function of Buttplug is make it easy for developers to get computers
to talk to sex toys. The software those developers make will tell
Buttplug what to say to the sex toys.

Interface applications are the link between users and Buttplug,
establishing the functionality the user was missing. Application
developers, those making the interfaces, are the shirt makers (and
thus, the metaphor is dead).

There are a many considerations, both non-technical and technical,
that need to be kept in mind when creating an application that will
interact with a sex toy. It is assumed that the sex toy will be
somehow attached to a person, who will most likely be engaged in the
act of sexing. This is not an situation normally covered in user
interface design or software/hardware engineering textbooks. It is
impossible to outline all of the relevant situational use cases. The
goal of this document is to provide a framework by which decisions
about specific application needs can be informed.

There are risks in building, releasing, and using software with the
kinds of contexts that are inherent in Buttplug. This document is what
I've learned so far about sex toy control and interface design, and
how to apply that when using or developing for Buttplug. It contains
the lessons I've learned over the years, and will be the home for
lessons learned in the future.

*** Why Do I Need You To Tell Me Where My Butt Is

Hi. I'm Kyle Machulis, lead architect of Buttplug. Since 2004, I've
been research and blogging about sex tech, both commercial and DIY, on
metafetish.com. I've followed online communities, talked to hundreds
of people involved in many different activities, fetishes, and
interests, and built many experiments to try to figure out if/how/why
technology will/won't work in situations presented to me.

The information presented here comes from over a decade of my amateur
research on the sex technology field, from the engineering and user
interface perspective. While I strive to provide as much help and
information as possible, I am an engineer, not a sexologist,
psychologist, sociologist, ethicist, or one of those other -ists that
deals directly with people and people issues. It is well known that
tech engineers aren't (to put it lightly) real great at "people". With
that in mind, I've tried to consult with many people that are those
-ists while building this software and writing this document. This
project was by no means done alone, nor could it have been done alone
to a quality I would've been satisfied with. The names of those brave
enough to be associated with this work are listed here:

- Should probably figure out who wants to be in this list.

When writing sex software, it's rather hard to avoid dealing with
people, unless the software is never actually used. While the
engineering portions of this document will be as rigorous as possible,
many of the observations about users and usage examples will be from
my personal experience. These are by no means complete studies. All
stories and examples presented are anecdotal at best, and complete
fabrications at worst.

Building this project has been a weird, great, weird journey. I hope
Buttplug helps you with whatever your wants and needs may be.


* Buttplug Ethics
:PROPERTIES:
:EXPORT_FILE_NAME: buttplug-ethics.md
:END:
** Buttplug Ethics

#+BEGIN_QUOTE
"... Society has put a lot of evils in our brains that we need to transcend before we make out." - [[https://youtu.be/ONi7QwYNQz4][Cex]]
#+END_QUOTE

Then we put some text here to see if our quote renders

*** Wait This Doesn't Sound Technical

*** There is No Such Thing As Ethical Buttplugging Under Open Source
*** You Must Be This Tall To Code With This Library
*** Empathy for the User Having Sex With Your Software
* Things You Shouldn't Do With Buttplug
:PROPERTIES:
:EXPORT_FILE_NAME: things-you-shouldnt-do-with-buttplug.md
:END:
* Strategies Against Buttplug Architecture
:PROPERTIES:
:EXPORT_FILE_NAME: architecture.md
:END:
** Strategies Against Buttplug Architecture
In this section, we'll cover what makes up Buttplug as an abstract
architecture. Getting a hang of the definitions and contexts here is
important, and will hopefully aid in understanding the amalgamation of
flailing, crying, and screaming we call "project documentation".

All of the concepts here are abstract. While we do have "reference
implementations" that are implemented by the Buttplug Core Team, we do
not require any specific programming language or serialization type
for implementing the protocol or client/server architecture of
Buttplug. Go wild. Surprise us. Make a Haskell version of all this
that really is one big IO Monad joke. Make an INTERCAL version because
there's already power play built into the language. Make a C version
because...

Ok you know what maybe don't make a C version. Do you really want to
put C in your butt?

*** A Note for Grizzled Developers
This section is written for those who may not be used to reading
concise system architecture definitions in specifications or
visualizing large systems via technical descriptions. All of the
information in the Architecture portion of this document is also in
the Buttplug Protocol Specification Introduction, in a more concise,
somewhat less friendly form that may be more familiar.

*** The 3 Genders: Server, Client, Application
:PROPERTIES:
:EXPORT_FILE_NAME: the3genders.md
:END:
There are 3 distinct conceptual parts to Buttplug. How all of these
exist (as separate programs, all in the same program, or some other
combination) are up to the needs of the developer and their specific
application. However, when we talk about these parts in documentation
and implementation, we keep them as separate ideas.
**** Buttplug Servers
A Buttplug Server is the piece that actually talks to hardware
somehow. This is usually via an Operating System Specific library or
API. It handles coordination of device connections/disconnections, and
manages which clients can talk to hardware. A few examples of jobs the
server has:

- The server is in charge of finding devices connected to the
  computer, be they bluetooth, usb, serial, firewire, parallel, or
  whatever other device communication type is supported by the server
  implementation in question.
- The server contains the knowledge of how to talk to a specific toy
  in the way that it understands, which we'll explain more about in
  "Buttplug Protocol" section.
- If a client is controlling a device, then for some reason
  disconnects, it is the server's job to stop the device until the
  client has reconnected and sent new control commands.

The server may be in charge of other tasks too. At a bare minimum, a
server should handle all non-device messages in the Buttplug Protocol
spec.

**** Buttplug Clients
Buttplug Clients are what developers use to talk to Buttplug Servers.
Clients are responsible for messages staying synced between the
developer's code and the servers. They may also expose devices and
interfaces in a language specific way that the developer is used to
working with.
**** Applications
Applications put some sort of specific UI/UX in front of a Buttplug
Client. This could be:

- A simple slider to control a toy from a web page
- A 3D game
- A word processor that makes the toy vibrate every time you hit a
  key.

The ideas here really are endless. All of these will use a Buttplug
Client to talk to a Buttplug Server.
*** Configuration Examples
There are multiple configurations and possibilities available,
depending on the programming language, operating system, and hardware
platform the developers and users choose.

Once again trying to limit specifics, here's a couple of examples of
how these pieces might go together:

- Someone builds a movie player application that is just one
  executable, containing both a Buttplug Server and Client. This
  allows them to use the Client API, which makes accessing the server
  easy, while also meaning users only have one thing to install and
  don't have to worry about connecting to outside programs.
- Someone builds a web app to control sex toys. The web browser does
  not support a way to access the sex toy hardware. The web app will
  contain a Buttplug Client that talks over the network to a native
  Buttplug Server, which has the ability to talk to the hardware.

* Buttplug Protocol and Etiquette
:PROPERTIES:
:EXPORT_FILE_NAME: buttplug-protocol-and-etiquette.md
:END:
** Buttplug Protocol and Etiquette
As a user of a Buttplug Client (which most developers using Buttplug
will be), you will usually be sheltered from the sausage factory that
is the Buttplug Message Protocol. If you'd like to see how the sausage
is made in all of its raw glory, read on.

You may remember this line from the foreword:

#+BEGIN_QUOTE
The only real function of Buttplug is make it easy for developers to
get computers to talk to sex toys.
#+END_QUOTE

To understand how Buttplug simplifies this situation, let's take a
look at how computer controlled sex toy communication normally
happens.

*** Computer To Toy Communication

The computer needs to talk to the computer controlled sex toy,
otherwise it wouldn't be computer controlled. To do this, is usually
talks some sort of simple, "low-level" language that the toy
manufacturer came up with. 

For instance, if the computer wants to talk to a vibrator (we'll call
this one Sex Toy A), the manufacturer may have made it so the computer
has to say something like (> denotes messages computer sends to toy, <
denotes messages toy sends to computer):

#+BEGIN_QUOTE
> Vibrate:50;
< OK;
> Vibrate:10;
< OK;
#+END_QUOTE

Which means that the vibrator should run at 50% of its top speed, then
later, at 10%. On each of those commands, the toy ends back a message
to say "Yes that was a correctly formatted message and I am now doing
the thing you said." 

However, another manufacturer making another vibrator (calling this
one Sex Toy B) may have commands that look like:

#+BEGIN_QUOTE
> 5,
> 1,
#+END_QUOTE

These commands mean basically the same thing as what we sent to the
first toy. Vibrate at 50%, vibrate at 10%. We don't get back anything
from these commands, we just fire them off and hope they run.

If the computer were to send the commands for Sex Toy B to the
Sex Toy A, it would at get back errors saying the language was
incorrect:

#+BEGIN_QUOTE
> Vibrate:50;
< OK;
> 5,
< ERR;
#+END_QUOTE

What happens if we send Sex Toy A commands to Sex Toy B?

#+BEGIN_QUOTE
> 5,
> Vibrate:10;
#+END_QUOTE

Sure, the toy doesn't vibrate, but now the computer doesn't know that.
Only the user knows since they aren't getting vibrated, and they are
probably very unhappy about that.

This is life at the Computer-To-Toy communication level. It's not
pretty, and it's not easy.
*** Application to Computer Communication
Moving up to the next level, there's 2 ways that Applications tell the
computer to send information to hardware.

- Via raw commands. This means just using the language talked about in
  the last section to make the computer talk to the toy. This happens
  a lot in applications that manufacturers make for their own
  hardware.
- Via an API (Application Programming Interface) of some kind. These
  are basically "simplified languages," usually put out by a
  manufacturer, to make it easy for developers to control the hardware
  without having to know the low level language the computer uses to
  talk to it. These APIs will usually only work for the toys the
  manufacturer makes, and there may be different APIs for different
  toys.

*** Where the Buttplug Protocol Comes into Play
Consider Buttplug to be sort of a Rosetta Stone for sex toys. As
mentioned in the last section, it's an API. Instead of just talking to
one kind of toy, it talks to as many toys as we've figured out the low
level language for.

Revisiting our example above, when an application wants to talk to a
sex toy using Buttplug, it will send messages similar to this (encoded
here in JSON for readability, but this information can be send in
other formats too):

#+BEGIN_QUOTE
{
  "SingleMotorVibrateCmd": {
    "Id": 1,
    "DeviceIndex": 1,
    "Speed": 0.5,
  }
}

...

{
  "SingleMotorVibrateCmd": {
    "Id": 2,
    "DeviceIndex": 1,
    "Speed": 0.1,
  }
}
#+END_QUOTE

These two messages just say "Make the device at index 1 vibrate at
50%, then 10%." In the Buttplug Server code, we know what kind of toy
hardware we're talking to, so we can convert it to Sex Toy A or Sex
Toy B without the application developer having to know anything about
how A or B actually work. Not only that, when yet another computer
controlled vibrator named Sex Toy C comes out 6 months after the
developer writes the code to send the message above, their code may
very well "just work" with the new toy without them having to make any
changes.

*** What the Buttplug Protocol Looks Like
The Buttplug Protocol is made up of a number of different messages
that fit into a few different classes. 

- Messages sent between a Buttplug Client and Server to establish
  communication and synchronize state (what toys are available,
  etc...)
- Messages sent by a Buttplug Client to control a specific brand/model
  of toy.
- Messages send by a Buttplug Client to control a class of toys (all
  vibrating toys, all thrusting toys, etc...)

Each message is strictly defined in the Buttplug Protocol
Specification, and later we'll go over applications for all of them in
the "Buttplug Message Guide" section of this document. For now, it's
worth knowing that each message has 2 required fields:

- Name, which lets the receiver know what it's supposed to do when it
  gets that message.
- Id, which allows the sender and receiver to let each other know
  where in the conversation they are. If a sender sends a message with
  an Id of 5 and needs information back in relation to that message,
  it will wait for the receiver to send back a message that also has
  an Id of 5.

All fields outside of these are specific to message and will be
covered in the specification or the Message Guide.


* Buttplug Message Guide
